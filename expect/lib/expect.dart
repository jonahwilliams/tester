// Copyright (c) 2020, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:matcher/matcher.dart';
export 'package:matcher/matcher.dart';

/// Assert that [actual] matches [matcher].
///
/// This is the main assertion function. [reason] is optional and is typically
/// not supplied, as a reason is generated from [matcher]; if [reason]
/// is included it is appended to the reason generated by the matcher.
///
/// [matcher] can be a value in which case it will be wrapped in an
/// [equals] matcher.
///
/// If the assertion fails a [String] is thrown.
void expect(dynamic actual, dynamic matcher, {String reason}) {
  var wrappedMatcher = wrapMatcher(matcher);
  var matchState = <dynamic, dynamic>{};
  try {
    if (wrappedMatcher.matches(actual, matchState)) {
      return;
    }
  } catch (_) {
    // Do nothing
  }
  var mismatchDescription = StringDescription();
  wrappedMatcher.describeMismatch(
    actual,
    mismatchDescription,
    matchState,
    false,
  );
  var buffer = StringBuffer()
    ..write('Expected: ')
    ..writeln(_prettyPrint(wrappedMatcher))
    ..write('  Actual: ')
    ..writeln(_prettyPrint(actual));
  var which = mismatchDescription.toString();
  if (which.isNotEmpty) {
    buffer
      ..write('   Which: ')
      ..writeln(which);
  }
  if (reason != null) {
    buffer.writeln(reason);
  }
  throw buffer.toString();
}

String _prettyPrint(dynamic value) =>
    StringDescription().addDescriptionOf(value).toString();
